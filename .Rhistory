# Count the number of trees in each planting decade category
planting_decade_count <- vancouver_trees %>%
group_by(planting_decade) %>%
summarise(count = n())
# Output the summarized table
print(planting_decade_count)
# Scatter plot of tree diameter vs planting date with alpha transparency
ggplot(vancouver_trees, aes(x = date_planted, y = diameter)) +
geom_point(alpha = 0.4, color = "darkblue") +  # Alpha transparency to reduce overplotting
labs(title = "Tree Diameter vs. Planting Date",
x = "Planting Date",
y = "Diameter (cm)") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),      # Adjust x-axis text size
axis.text.y = element_text(size = 12),      # Adjust y-axis text size
plot.title = element_text(size = 14, face = "bold")  # Adjust plot title
)
# Create a new categorical variable for planting decade with updated ranges
vancouver_trees <- vancouver_trees %>%
mutate(planting_decade = case_when(
year(date_planted) < 1990 ~ "Before 1990",
year(date_planted) >= 1990 & year(date_planted) < 2010 ~ "1990-2009",
year(date_planted) >= 2010 ~ "2010+",
TRUE ~ NA_character_  # Handle NA values
))
# Count the number of trees in each planting decade category
planting_decade_count <- vancouver_trees %>%
group_by(planting_decade) %>%
summarise(count = n())
# Output the summarized table
print(planting_decade_count)
# Create a new categorical variable for planting decade with updated ranges
vancouver_trees <- vancouver_trees %>%
mutate(planting_decade = case_when(
year(date_planted) < 1990 ~ "Before 1990",
year(date_planted) >= 1990 & year(date_planted) < 2010 ~ "1990-2009",
year(date_planted) >= 2010 ~ "2010+",
TRUE ~ NA_character_  # Handle NA values
))
# Count the number of trees in each planting decade category
planting_decade_count <- vancouver_trees %>%
group_by(planting_decade) %>%
summarise(count = n())
# Output the summarized table
print(planting_decade_count)
# Create a new categorical variable for planting decade with updated ranges
vancouver_trees <- vancouver_trees %>%
mutate(planting_decade = case_when(
year(date_planted) < 1990 ~ "Before 1990",
year(date_planted) >= 1990 & year(date_planted) < 2010 ~ "1990-2009",
year(date_planted) >= 2010 ~ "2010+",
TRUE ~ NA_character_  # Handle NA values
))
# Count the number of trees in each planting decade category
planting_decade_count <- vancouver_trees %>%
group_by(planting_decade) %>%
summarise(count = n())
# Output the summarized table
print(planting_decade_count)
# Create a new categorical variable for planting decade
vancouver_trees <- vancouver_trees %>%
mutate(planting_decade = case_when(
year(date_planted) < 1990 ~ "Before 1990",
year(date_planted) >= 1990 & year(date_planted) < 2010 ~ "1990-2009",
year(date_planted) >= 2010 ~ "2010+",
TRUE ~ NA_character_  # Handle NA values
))
# Count the number of trees in each planting decade category
planting_decade_count <- vancouver_trees %>%
group_by(planting_decade) %>%
summarise(count = n())
# Output the summarized table
print(planting_decade_count)
# Create a new categorical variable for planting decade
vancouver_trees <- vancouver_trees %>%
mutate(planting_decade = case_when(
year(date_planted) < 1990 ~ "Before 1990",
year(date_planted) >= 1990 & year(date_planted) < 2010 ~ "1990-2009",
year(date_planted) >= 2010 ~ "2010+",
TRUE ~ NA_character_  # Handle NA values
))
# Count the number of trees in each planting decade category
planting_decade_count <- vancouver_trees %>%
group_by(planting_decade) %>%
summarise(count = n())
# Output the summarized table
print(planting_decade_count)
# Scatter plot of tree diameter vs planting date with alpha transparency
ggplot(vancouver_trees, aes(x = date_planted, y = diameter)) +
geom_point(alpha = 0.4, color = "darkblue") +  # Alpha transparency to reduce overplotting
labs(title = "Tree Diameter vs. Planting Date",
x = "Planting Date",
y = "Diameter (cm)") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),      # Adjust x-axis text size
axis.text.y = element_text(size = 12),      # Adjust y-axis text size
plot.title = element_text(size = 14, face = "bold")  # Adjust plot title
)
# Scatter plot of tree diameter vs planting date with alpha transparency
ggplot(vancouver_trees, aes(x = date_planted, y = diameter)) +
geom_point(alpha = 0.4, color = "darkblue") +  # Alpha transparency to reduce overplotting
labs(title = "Tree Diameter vs. Planting Date",
x = "Planting Date",
y = "Diameter (cm)") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),      # Adjust x-axis text size
axis.text.y = element_text(size = 12),      # Adjust y-axis text size
plot.title = element_text(size = 14, face = "bold")  # Adjust plot title
)
# Scatter plot of tree diameter vs planting date with alpha transparency
ggplot(vancouver_trees, aes(x = date_planted, y = diameter)) +
geom_point(alpha = 0.4, color = "darkblue") +  # Alpha transparency to reduce overplotting
ylim(0, 200) +
labs(title = "Tree Diameter vs. Planting Date",
x = "Planting Date",
y = "Diameter (cm)") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),      # Adjust x-axis text size
axis.text.y = element_text(size = 12),      # Adjust y-axis text size
plot.title = element_text(size = 14, face = "bold")  # Adjust plot title
)
# Scatter plot of tree diameter vs planting date with alpha transparency
ggplot(vancouver_trees, aes(x = date_planted, y = diameter)) +
geom_point(alpha = 0.2, color = "darkblue") +  # Alpha transparency to reduce overplotting
ylim(0, 100) +
labs(title = "Tree Diameter vs. Planting Date",
x = "Planting Date",
y = "Diameter (cm)") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),      # Adjust x-axis text size
axis.text.y = element_text(size = 12),      # Adjust y-axis text size
plot.title = element_text(size = 14, face = "bold")  # Adjust plot title
)
# Scatter plot of tree diameter vs planting date with alpha transparency
ggplot(vancouver_trees, aes(x = date_planted, y = diameter)) +
geom_point(alpha = 0.1, color = "darkblue") +  # Alpha transparency to reduce overplotting
ylim(0, 100) +
labs(title = "Tree Diameter vs. Planting Date",
x = "Planting Date",
y = "Diameter (cm)") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),      # Adjust x-axis text size
axis.text.y = element_text(size = 12),      # Adjust y-axis text size
plot.title = element_text(size = 14, face = "bold")  # Adjust plot title
)
# Scatter plot of tree diameter vs planting date with alpha transparency
ggplot(vancouver_trees, aes(x = date_planted, y = diameter)) +
geom_point(alpha = 0.1, color = "darkblue") +  # Alpha transparency to reduce overplotting
ylim(0, 100) +
labs(title = "Tree Diameter vs. Planting Date",
x = "Planting Date",
y = "Diameter (cm)") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12),      # Adjust x-axis text size
axis.text.y = element_text(size = 12),      # Adjust y-axis text size
plot.title = element_text(size = 12, face = "bold")  # Adjust plot title
)
# Untidy the data: combine genus_name and species_name into a single column
vancouver_trees_untidy <- vancouver_trees %>%
unite("full_species", genus_name, species_name, sep = " ", na.rm = TRUE)
# Show the first few rows of the untidy data
head(vancouver_trees_untidy %>% select(tree_id, full_species, diameter, date_planted))
# Untidy the data: combine genus_name and species_name into a single column
vancouver_trees_untidy <- vancouver_trees %>%
unite("full_species", genus_name, species_name, sep = " ", na.rm = TRUE)
# Show the first few rows of the untidy data
head(vancouver_trees_untidy)
# Untidy the data: combine genus_name and species_name into a single column
vancouver_trees_untidy <- vancouver_trees %>%
unite("full_species", genus_name, species_name, sep = " ", na.rm = TRUE)
# Show the first few rows of the untidy data
head(vancouver_trees_untidy %>% select(tree_id, full_species, diameter, date_planted))
# Untidy the data: combine genus_name and species_name into a single column
vancouver_trees_untidy <- vancouver_trees %>%
unite("full_species", genus_name, species_name, sep = " ", na.rm = TRUE)
# Show the first few rows of the untidy data
head(vancouver_trees_untidy %>% select(tree_id, full_species, diameter, date_planted))
# Tidy the data back by separating the full_species column into genus_name and species_name
vancouver_trees_tidy <- vancouver_trees_untidy %>%
separate(full_species, into = c("genus_name", "species_name"), sep = " ")
# Show the first few rows of the tidy data
head(vancouver_trees_tidy %>% select(tree_id, genus_name, species_name, diameter, date_planted))
# Tidy the data back by separating the full_species column into genus_name and species_name
vancouver_trees_tidy <- vancouver_trees_untidy %>%
separate(full_species, into = c("genus_name", "species_name"), sep = " ")
# Show the first few rows of the tidy data
head(vancouver_trees_tidy %>% select(tree_id, genus_name, species_name, diameter, date_planted))
# Tidy the data back by separating the full_species column into genus_name and species_name
vancouver_trees_tidy <- vancouver_trees_untidy %>%
separate(full_species, into = c("genus_name", "species_name"), sep = " ")
# Show the first few rows of the tidy data
head(vancouver_trees_tidy %>% select(tree_id, genus_name, species_name, diameter, date_planted))
# Untidy the data: combine genus_name and species_name into a single column
vancouver_trees_untidy <- vancouver_trees %>%
unite("full_species", genus_name, species_name, sep = " ", na.rm = TRUE)
# Show the first few rows of the untidy data
head(vancouver_trees_untidy %>% select(tree_id, full_species, diameter, date_planted))
# Untidy the data: combine genus_name and species_name into a single column
vancouver_trees_untidy <- vancouver_trees %>%
unite("full_species", genus_name, species_name, sep = " ", na.rm = TRUE)
# Show the first few rows of the untidy data
head(vancouver_trees_untidy %>% select(tree_id, full_species, diameter, date_planted))
# Untidy the data: combine genus_name and species_name into a single column
vancouver_trees_untidy <- vancouver_trees %>%
unite("full_species", genus_name, species_name, sep = " ", na.rm = TRUE)
# Show the first few rows of the untidy data
head(vancouver_trees_untidy %>% select(tree_id, full_species, diameter, date_planted))
# Create a clean version of the dataset with relevant columns
vancouver_trees_clean <- vancouver_trees %>%
# 1. Filter out rows where the diameter or planting date is missing
filter(!is.na(diameter) & !is.na(date_planted)) %>%
# 2. Select only relevant columns: tree species, diameter, and planting date
select(tree_id, genus_name, species_name, diameter, date_planted) %>%
# 3. Create a new categorical variable for tree size (small, medium, large)
mutate(diameter_category = case_when(
diameter < 10 ~ "Small",
diameter >= 10 & diameter < 30 ~ "Medium",
diameter >= 30 ~ "Large"
)) %>%
# 4. Create a new categorical variable for planting decade
mutate(planting_decade = case_when(
year(date_planted) < 1990 ~ "Before 1990",
year(date_planted) >= 1990 & year(date_planted) < 2010 ~ "1990-2009",
year(date_planted) >= 2010 ~ "2010+",
)) %>%
# 5. Filter to include only valid planting decades (drop rows with NA for planting date)
filter(!is.na(planting_decade))
# Output the first few rows of the cleaned dataset
head(vancouver_trees_clean)
# Create a clean version of the dataset with relevant columns
vancouver_trees_clean <- vancouver_trees %>%
# 1. Filter out rows where the diameter or planting date is missing
filter(!is.na(diameter) & !is.na(date_planted)) %>%
# 2. Select only relevant columns: tree species, diameter, and planting date
select(tree_id, genus_name, species_name, diameter, date_planted) %>%
# 3. Create a new categorical variable for tree size (small, medium, large)
mutate(diameter_category = case_when(
diameter < 10 ~ "Small",
diameter >= 10 & diameter < 30 ~ "Medium",
diameter >= 30 ~ "Large"
)) %>%
# 4. Create a new categorical variable for planting decade
mutate(planting_decade = case_when(
year(date_planted) < 1990 ~ "Before 1990",
year(date_planted) >= 1990 & year(date_planted) < 2010 ~ "1990-2009",
year(date_planted) >= 2010 ~ "2010+",
)) %>%
# 5. Filter to include only valid planting decades (drop rows with NA for planting date)
filter(!is.na(planting_decade))
# Output the first few rows of the cleaned dataset
head(vancouver_trees_clean)
# Fit a linear model: tree diameter (Y) vs planting date (X)
model <- lm(diameter ~ date_planted, data = vancouver_trees_clean)
# Print the summary of the model
summary(model)
# Fit a linear model: tree diameter (Y) vs planting date (X)
model <- lm(diameter ~ date_planted, data = vancouver_trees_clean)
# Print the summary of the model
summary(model)
# Fit a linear model: tree diameter (Y) vs planting date (X)
model <- lm(diameter ~ date_planted, data = vancouver_trees_clean)
# Print the summary of the model
summary(model)
# Fit a linear model: tree diameter (Y) vs planting date (X)
model <- lm(diameter ~ date_planted, data = vancouver_trees_clean)
# Print the summary of the model
summary(model)
# Load the broom package
library(broom)
# Use broom to extract the regression coefficients and p-values
model_summary <- tidy(model)
# Display the model summary
model_summary
# Load the broom package
library(broom)
# Use broom to extract the regression coefficients and p-values
model_summary <- tidy(model)
# Display the model summary
model_summary
# Load the broom package
library(broom)
# Use broom to extract the regression coefficients and p-values
model_summary <- tidy(model)
# Display the model summary
model_summary
# Load the broom package
library(broom)
# Use broom to extract the regression coefficients and p-values
model_summary <- tidy(model)
# Display the model summary
model_summary
# Load the here package
library(here)
# Load the here package
library(here)
install.packages("here")
# Load the here package
library(here)
# Create the output folder if it doesn't already exist
if(!dir.exists(here("output"))) {
dir.create(here("output"))
}
# Save the planting_decade_count table as a CSV file in the output folder
write_csv(planting_decade_count, here("output", "planting_decade_summary.csv"))
# Verify the file has been written
list.files(here("output"))
# Load the here package
library(here)
# Create the output folder if it doesn't already exist
if(!dir.exists(here("output"))) {
dir.create(here("output"))
}
# Save the planting_decade_count table as a CSV file in the output folder
write_csv(planting_decade_count, here("output", "planting_decade_summary.csv"))
# Verify the file has been written
list.files(here("output"))
# Load the here package
library(here)
# Create the output folder if it doesn't already exist
if(!dir.exists(here("output"))) {
dir.create(here("output"))
}
# Save the planting_decade_count table as a CSV file in the output folder
write_csv(planting_decade_count, here("output", "planting_decade_summary.csv"))
# Verify the file has been written
list.files(here("output"))
# Load the here package
library(here)
# Create the output folder if it doesn't already exist
if(!dir.exists(here("output"))) {
dir.create(here("output"))
}
# Save the planting_decade_count table as a CSV file in the output folder
write_csv(planting_decade_count, here("output", "planting_decade_summary.csv"))
# Verify the file has been written
list.files(here("output"))
# Save the model object to an RDS file in the output folder
saveRDS(model, here("output", "tree_diameter_model.rds"))
# Load the model object back from the RDS file
loaded_model <- readRDS(here("output", "tree_diameter_model.rds"))
# Print the loaded model to confirm it's been loaded correctly
print(loaded_model)
# Save the model object to an RDS file in the output folder
saveRDS(model, here("output", "tree_diameter_model.rds"))
# Load the model object back from the RDS file
loaded_model <- readRDS(here("output", "tree_diameter_model.rds"))
# Print the loaded model to confirm it's been loaded correctly
print(loaded_model)
# Load the here package
library(here)
# Create the output folder if it doesn't already exist
if(!dir.exists(here("output"))) {
dir.create(here("output"))
}
# Save the planting_decade_count table as a CSV file in the output folder
write_csv(planting_decade_count, here("output", "planting_decade_summary.csv"))
# Verify the file has been written
list.files(here("output"))
# Save the model object to an RDS file in the output folder
saveRDS(model, here("output", "tree_diameter_model.rds"))
# Load the model object back from the RDS file
loaded_model <- readRDS(here("output", "tree_diameter_model.rds"))
# Print the loaded model to confirm it's been loaded correctly
print(loaded_model)
#' Summarize Key Statistics of a Numeric Vector
#'
#' Computes and returns key descriptive statistics for a given numeric vector.
#' This function is useful for quick exploratory data analysis to get an overview of the
#' data's distribution.
#'
#' @param x A numeric vector for which statistics will be calculated. It is crucial that the
#'          input is numeric as the calculations (mean, median, quantiles, etc.) are only
#'          valid for numeric data. The parameter name 'x' is commonly used in statistical
#'          functions to represent data inputs, which is why it was chosen here.
#' @param probs A numeric vector of probabilities corresponding to the quantiles to be
#'              computed. The default values are set to c(0.25, 0.75) to compute the first
#'              and third quartiles. This parameter is named 'probs' to indicate that these
#'              are probabilities corresponding to quantiles, aligning with the terminology
#'              used in the quantile function in R.
#' @param na.rm A logical value indicating whether NA values should be removed before the
#'              computation. Default is TRUE, as NA values can skew the results of
#'              statistical calculations. The parameter is named 'na.rm', which stands for
#'              'NA remove'. This is a standard naming convention in R for parameters that
#'              control the omission of NA values in calculations.
#'
#' @return A list containing the following elements:
#'         - mean: The mean of the vector
#'         - median: The median of the vector
#'         - quantile_25: The 25th percentile of the vector
#'         - quantile_75: The 75th percentile of the vector
#'         - min: The minimum value in the vector
#'         - max: The maximum value in the vector
#'         - range: The range of the vector, calculated as the difference between max and min
summarize_stats <- function(x, probs = c(0.25, 0.75), na.rm = TRUE) {
if (!is.numeric(x)) {
stop("Input must be a numeric vector")
}
stats <- list(
mean = mean(x, na.rm = na.rm),
median = median(x, na.rm = na.rm),
quantile_25 = quantile(x, probs = probs[1], na.rm = na.rm)[[1]],
quantile_75 = quantile(x, probs = probs[2], na.rm = na.rm)[[1]],
min = min(x, na.rm = na.rm),
max = max(x, na.rm = na.rm),
range = diff(range(x, na.rm = na.rm))
)
return(stats)
}
library(tidyverse)
library(testthat)
#' Summarize Key Statistics of a Numeric Vector
#'
#' Computes and returns key descriptive statistics for a given numeric vector.
#' This function is useful for quick exploratory data analysis to get an overview of the
#' data's distribution.
#'
#' @param x A numeric vector for which statistics will be calculated. It is crucial that the
#'          input is numeric as the calculations (mean, median, quantiles, etc.) are only
#'          valid for numeric data. The parameter name 'x' is commonly used in statistical
#'          functions to represent data inputs, which is why it was chosen here.
#' @param probs A numeric vector of probabilities corresponding to the quantiles to be
#'              computed. The default values are set to c(0.25, 0.75) to compute the first
#'              and third quartiles. This parameter is named 'probs' to indicate that these
#'              are probabilities corresponding to quantiles, aligning with the terminology
#'              used in the quantile function in R.
#' @param na.rm A logical value indicating whether NA values should be removed before the
#'              computation. Default is TRUE, as NA values can skew the results of
#'              statistical calculations. The parameter is named 'na.rm', which stands for
#'              'NA remove'. This is a standard naming convention in R for parameters that
#'              control the omission of NA values in calculations.
#'
#' @return A list containing the following elements:
#'         - mean: The mean of the vector
#'         - median: The median of the vector
#'         - quantile_25: The 25th percentile of the vector
#'         - quantile_75: The 75th percentile of the vector
#'         - min: The minimum value in the vector
#'         - max: The maximum value in the vector
#'         - range: The range of the vector, calculated as the difference between max and min
summarize_stats <- function(x, probs = c(0.25, 0.75), na.rm = TRUE) {
if (!is.numeric(x)) {
stop("Input must be a numeric vector")
}
stats <- list(
mean = mean(x, na.rm = na.rm),
median = median(x, na.rm = na.rm),
quantile_25 = quantile(x, probs = probs[1], na.rm = na.rm)[[1]],
quantile_75 = quantile(x, probs = probs[2], na.rm = na.rm)[[1]],
min = min(x, na.rm = na.rm),
max = max(x, na.rm = na.rm),
range = diff(range(x, na.rm = na.rm))
)
return(stats)
}
# Basic usage of summarize_stats with a numeric vector
example_vector <- c(10, 20, 30, 40, 50)
basic_stats <- summarize_stats(example_vector)
print(basic_stats)
# Demonstrating NA handling in summarize_stats
example_vector_na <- c(1, 2, NA, 4, 5, NA)
na_stats <- summarize_stats(example_vector_na)
print(na_stats)
# Using custom quantile probabilities in summarize_stats
quantile_vector <- c(3, 5, 7, 9, 11)
custom_quantile_stats <- summarize_stats(quantile_vector, probs = c(0.1, 0.9))
print(custom_quantile_stats)
# Error handling demonstration: passing a non-numeric vector
non_numeric_vector <- c("a", "b", "c")
summarize_stats(non_numeric_vector)
test_that("Testing summarize_stats functionality", {
# Test 1: Vector with no NAs
test_vector1 <- c(10, 20, 30, 40, 50)
results1 <- summarize_stats(test_vector1)
expect_is(results1, "list",
info = "Function should return a list.")
expect_equal(results1$mean, mean(test_vector1),
info = "Mean should be correctly calculated for vectors without NA.")
expect_equal(results1$median, median(test_vector1),
info = "Median should be correctly calculated for vectors without NA.")
# Test 2: Vector with NAs
test_vector2 <- c(1, 2, NA, 4, 5, NA)
results2 <- summarize_stats(test_vector2)
expect_equal(results2$min, min(test_vector2, na.rm = TRUE),
info = "Minimum should be correctly calculated ignoring NAs.")
expect_equal(results2$max, max(test_vector2, na.rm = TRUE),
info = "Maximum should be correctly calculated ignoring NAs.")
# Test 3: Non-numeric vector
test_vector3 <- c("a", "b", "c")
expect_error(summarize_stats(test_vector3),
"Input must be a numeric vector",
info = "Function should return an error for non-numeric vectors.")
})
library(devtools)
packageVersion("devtools")
#> [1] '2.4.5'
packageVersion("devtools")
clear
/Users/xiaoceyou/Desktop/stat545/assignment-b2-Owl64901
create_package("/Users/xiaoceyou/Desktop/stat545/assignment-b2-Owl64901/groupMissingCount")
here::dr_here()
library(devtools)
#> Loading required package: usethis
packageVersion("devtools")
setwd("/Users/xiaoceyou/Desktop/stat545/groupMissingCount")
usethis::create_package(".")
